//   program to implementation of the linked list in the queue  ------->>>>>>>>>
//  because in array we have limitation  with the memory --->
//  if we intialize an array of 20 memory --->>>> and we use only 18  then 2 will be waste---->>>
// and if we want to use 22 memory then we need to again reintialize memory -------->>>>>>>   

//  linked list is better for this use------->>>>>>>
//  let see th code =--->>>



#include<iostream>
using namespace std;

class  node {
    public:
    int data;
    node* next;


    node(int val ){

      data = val ; 
      next =NULL;
    }
       
};
class que {
    node* front ;
    node* back ; 

    public:
    que(){
        front = NULL;
        back = NULL;

    }
    void push(int x){
    node* n = new node(x);  
    if(front == NULL){
        back =n ;
        front =n ;
    }                             
    back->next = n ;
    back =n ;

}

void pop(){
    if(front ==NULL){
        cout<<"queue underflow"<<endl;
        return ; 
    }
    node* todelete = front ;
    front = front->next;

    delete todelete;
}

int peek(){
     if(front ==NULL){
        cout<<"no element in queue"<<endl;
        return -1 ; 
    }
    return front->data;
}

bool empty(){
    if(front ==NULL){
       
        return true  ; 
    }
    return false;
}

 
};


int main(){

que q ;
q.push(1);
q.push(2);
q.push(3);
q.push(4);

cout<<q.peek()<<endl;
q.pop();
cout<<q.peek()<<endl;
q.pop();
cout<<q.peek()<<endl;
q.pop();
cout<<q.peek()<<endl;
q.pop();

cout<<q.empty()<<endl;

return 0;
 }
